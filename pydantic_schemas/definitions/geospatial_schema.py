# generated by datamodel-codegen:
#   filename:  geospatial-schema.json
#   timestamp: 2024-07-10T15:53:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import Extra, Field, confloat

from .schema_base_model import SchemaBaseModel


class Producer(SchemaBaseModel):
    name: Optional[str] = Field(None, description="Name (required)", title="Name")
    abbr: Optional[str] = Field(None, title="Abbreviation")
    affiliation: Optional[str] = Field(None, title="Affiliation")
    role: Optional[str] = Field(None, title="Role")


class MetadataInformation(SchemaBaseModel):
    """
    Document description
    """

    class Config:
        extra = Extra.forbid

    title: Optional[str] = Field(None, description="Document title", title="Document title")
    idno: Optional[str] = Field(None, title="Unique ID number for the document")
    producers: Optional[List[Producer]] = Field(None, description="List of producers", title="Producers")
    production_date: Optional[str] = Field(
        None, description="Document production date using format(YYYY-MM-DD)", title="Date of Production"
    )
    version: Optional[str] = Field(
        None, description="Identify and describe the current version of the document", title="Document version"
    )


class GeometricObject(SchemaBaseModel):
    """
    Definition of the geometric objects including the geometry type and count
    """

    geometricObjectType: Optional[str] = Field(
        None,
        description=(
            "Identification of the objects used to represent features in the vector spatial dataset. Codelist value"
            " according to the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_GeometricObjectTypeCode)"
            " GeometricObjectType codelist. Possible values: {`complex`, `composite`, `curve`, `point`, `solid`,"
            " `surface`}"
        ),
        title="Geometric Object Type",
    )
    geometricObjectCount: Optional[int] = Field(
        None, description="Number of geometric objects available for the resource", title="Geometric Object count"
    )


class VectorSpatialRepresentation(SchemaBaseModel):
    """
    Vector Resource spatial representation - Spatial representation information for the dataset (resource). Best practice is to include metadata for spatial representation if the described resource is a georeferenced vector dataset.
    """

    topologyLevel: Optional[str] = Field(
        None,
        description=(
            "Topology level associated to the vector resource. Codelist value according to the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopologyLevelCode) TopologyLevel"
            " codelist. Possible values: {`geometryOnly`, `topology1D`, `planarGraph`, `fullPlanarGraph`,"
            " `surfaceGraph`, `fullSurfaceGraph`, `topology3D`, `fullTopology3D`, `abstract`}"
        ),
        title="Topology Level",
    )
    geometricObjects: Optional[List[GeometricObject]] = Field(
        None,
        description="Definition(s) of the geometric objects including the geometry type and count",
        title="Geometric objects definition(s)",
    )


class Resolution(SchemaBaseModel):
    """
    Resolution associated to the dimension. The resolution is handled as 'measure' which could be either a length, distance [special measure of length), angle or scale.
    """

    uom: Optional[str] = Field(None, description="Unit considered for the resolution measure", title="Unit Of Measure")


class AxisDimensionProperty(SchemaBaseModel):
    dimensionName: Optional[str] = Field(
        None,
        description=(
            "name type of the dimension. Codelist value according to the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_DimensionNameTypeCode)"
            " DimensionNameType codelist. Possible values: {`row`, `column`, `vertical`, `track`, `crossTrack`, `line`,"
            " `sample`, `time`}"
        ),
        title="Dimension name type",
    )
    dimensionSize: Optional[int] = Field(None, description="Size of the dimension", title="Dimension size")
    resolution: Optional[Resolution] = Field(
        None,
        description=(
            "Resolution associated to the dimension. The resolution is handled as 'measure' which could be either a"
            " length, distance [special measure of length), angle or scale."
        ),
        title="Dimension resolution",
    )


class GridSpatialRepresentation(SchemaBaseModel):
    """
    Grid  Resource spatial representation - Spatial representation information for the dataset (resource). Best practice is to include metadata for spatial representation if the described resource is a georeferenced gridded / raster dataset.
    """

    numberOfDimensions: Optional[int] = Field(
        None, description="Number of dimensions in the grid", title="Number of dimensions"
    )
    axisDimensionProperties: Optional[List[AxisDimensionProperty]] = Field(
        None, description="Properties of the axis dimensions", title="Axis dimension properties"
    )
    cellGeometry: Optional[str] = Field(
        None,
        description=(
            "Type of geometry used for the grid cells. Codelist value according to the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CellGeometryCode)"
            " CellGeometryCode codelist. Possible values: {`point`, `area`, `voxel`, `stratum`}"
        ),
        title="Cell geometry",
    )
    transformationParameterAvailability: Optional[bool] = Field(
        None,
        description="Indicates whether grid transformation parameters are available",
        title="Transformation Parameter Availability",
    )


class SpatialRepresentationInfoItem(SchemaBaseModel):
    vectorSpatialRepresentation: Optional[VectorSpatialRepresentation] = Field(
        None,
        description=(
            "Vector Resource spatial representation - Spatial representation information for the dataset (resource)."
            " Best practice is to include metadata for spatial representation if the described resource is a"
            " georeferenced vector dataset."
        ),
    )
    gridSpatialRepresentation: Optional[GridSpatialRepresentation] = Field(
        None,
        description=(
            "Grid  Resource spatial representation - Spatial representation information for the dataset (resource)."
            " Best practice is to include metadata for spatial representation if the described resource is a"
            " georeferenced gridded / raster dataset."
        ),
    )


class AssociationType(SchemaBaseModel):
    """
    Type of association between the dataset resource and the aggregate Resource
    """

    codeListValue: Optional[str] = Field(
        None,
        title=(
            "Association type, eg. 'isComposedOf'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DS_AssociationTypeCode)"
            " AssociationType codelist. Suggested values: {crossReference, largerWorkCitation, partOfSeamlessDatabase,"
            " source, stereoMate, isComposedOf, collectiveTitle, series, dependency, revisionOf}"
        ),
    )
    codeList: Optional[str] = Field(
        None,
        title=(
            "Codelist used for association types. Recommended URI:"
            " http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DS_AssociationTypeCode"
        ),
    )
    codeSpace: Optional[str] = Field(
        None, title="Codespace of the association types codelist. Recommended value: ISOTC211/19115"
    )


class InitiativeType(SchemaBaseModel):
    """
    Type of initative behind the aggregate Resource
    """

    codeListValue: Optional[str] = Field(
        None,
        title=(
            "Initiative type, eg. 'collection'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DS_InitiativeTypeCode)"
            " InitiativeType codelist. Suggested values: {campaign, collection, dataDictionary, exercise, experiment,"
            " investigation, mission, sensor, operation, platform, process, program, project, sciencePaper, study,"
            " task, trial, userGuide}"
        ),
    )
    codeList: Optional[str] = Field(
        None,
        title=(
            "Codelist used for initiative types. Recommended URI:"
            " http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DS_InitiativeTypeCode"
        ),
    )
    codeSpace: Optional[str] = Field(
        None, title="Codespace of the initiative types codelist. Recommended value: ISOTC211/19115"
    )


class AggregationInfo(SchemaBaseModel):
    """
    Identification of aggregate that encompasses the described resource, eg. data collection
    """

    aggregateDataSetName: Optional[str] = Field(None, title="Name of the Aggregate dataset")
    aggregateDataSetIdentifier: Optional[str] = Field(None, title="Identifier of the Aggregate dataset")
    associationType: Optional[AssociationType] = Field(
        None,
        description="Type of association between the dataset resource and the aggregate Resource",
        title="Association type",
    )
    initiativeType: Optional[InitiativeType] = Field(
        None, description="Type of initative behind the aggregate Resource", title="Initiative type"
    )


class GeographicBoundingBox(SchemaBaseModel):
    westBoundLongitude: Optional[confloat(ge=-180.0, le=180.0)] = Field(None, title="West")
    eastBoundLongitude: Optional[confloat(ge=-180.0, le=180.0)] = Field(None, title="East")
    southBoundLatitude: Optional[confloat(ge=-180.0, le=180.0)] = Field(None, title="South")
    northBoundLatitude: Optional[confloat(ge=-180.0, le=180.0)] = Field(None, title="North")


class Geohash(SchemaBaseModel):
    geohash: Optional[str] = Field(None, title="Geohash")
    note: Optional[str] = Field(None, title="Note")


class Ring(Enum):
    exterior = "exterior"
    interior = "interior"


class Type(Enum):
    Point = "Point"
    LineString = "LineString"
    Polygon = "Polygon"


class PolygonItem(SchemaBaseModel):
    ring: Optional[Ring] = Field(None, title="Ring boundary")
    type: Optional[Type] = Field(None, title="Type")
    coordinates: Optional[List[List[float]]] = Field(None, title="Coordinates")


class GeographicBoundingPolygon(SchemaBaseModel):
    """
    Geographic Bounding Polygon
    """

    id: Optional[str] = Field(None, title="Identifier")
    polygon: Optional[List[PolygonItem]] = Field(None, title="Polygon")


class GeographicElementItem(SchemaBaseModel):
    geographicBoundingBox: Optional[GeographicBoundingBox] = Field(None, title="Geographic Bounding Box")
    geohash: Optional[Geohash] = Field(None, title="Geohash")
    geographicDescription: Optional[str] = Field(None, title="Geographic description identifier")
    geographicBoundingPolygon: Optional[GeographicBoundingPolygon] = Field(
        None, description="Geographic Bounding Polygon", title="Geographic Bounding Polygon"
    )


class TemporalElementExtentItem(SchemaBaseModel):
    beginPosition: Optional[str] = Field(
        None,
        description=(
            "Begin time position. Requires an extended ISO 8601 formatted combined UTC date and time string"
            " (2009-11-17T10:00:00)"
        ),
        title="Begin time position",
    )
    endPosition: Optional[str] = Field(
        None,
        description=(
            "End time position. Requires an extended ISO 8601 formatted combined UTC date and time string"
            " (2009-11-17T10:00:00)"
        ),
        title="End time position",
    )


class VerticalElementItem(SchemaBaseModel):
    minimumValue: Optional[float] = Field(None, title="Minimum vertical value")
    maximumValue: Optional[float] = Field(None, title="Maximum vertical value")
    verticalCRS: Optional[Any] = Field(
        None,
        description="Vertical coordinate reference system used (as defined in the ISO 19136 / GML standard",
        title="Vertical CRS",
    )


class Extent(SchemaBaseModel):
    """
    Defines the spatial (horizontal and vertical) and temporal region to which the content of the resource applies.
    """

    geographicElement: Optional[List[GeographicElementItem]] = Field(
        None, description="Geographic extent(s)", title="Geographic extent(s)"
    )
    temporalElementExtent: Optional[List[TemporalElementExtentItem]] = Field(None, title="Temporal extent(s)")
    verticalElement: Optional[List[VerticalElementItem]] = Field(None, title="Vertical extent(s)")


class SpatialResolutionItem(SchemaBaseModel):
    uom: Optional[str] = Field(None, description="Unit considered for the resolution measure", title="Unit Of Measure")
    value: Optional[float] = Field(None, description="Value", title="Value")


class AccessProperties(SchemaBaseModel):
    fees: Optional[str] = Field(None, description="Eventual fees associated with the service", title="Fees")
    plannedAvailableDateTime: Optional[str] = Field(
        None,
        description=(
            "Date and time when the metadata record was created or updated. Requires an extended ISO 8601 formatted"
            " combined UTC date and time string (2009-11-17T10:00:00)"
        ),
        title="Service availability Date Stamp",
    )
    orderingInstructions: Optional[str] = Field(
        None, description="Eventual instructions for the ordering", title="Ordering instructions"
    )
    turnaround: Optional[str] = Field(None, description="Turnaround", title="Turnaround")


class CoupledResourceItem(SchemaBaseModel):
    operationName: Optional[str] = Field(None, title="Operation name")
    identifier: Optional[str] = Field(None, title="Identifier of the coupled resource")


class CouplingType(SchemaBaseModel):
    """
    Coupling type
    """

    codeListValue: Optional[str] = Field(
        None,
        title=(
            "Coupling type, eg. 'loose'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#SV_CouplingTypeCode) CouplingType"
            " codelist. Suggested values: {loose, mixed, tight}"
        ),
    )
    codeList: Optional[str] = Field(
        None,
        title=(
            "Codelist used for coupling types. Recommended URI:"
            " http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#SV_CouplingTypeCode"
        ),
    )
    codeSpace: Optional[str] = Field(
        None, title="Codespace of the coupling types codelist. Recommended value: ISOTC211/19119"
    )


class OperatesOnItem(SchemaBaseModel):
    """
    Operates On relationship
    """

    uuidref: Optional[str] = Field(None, title="Unique dataset identifier within the same catalogue")


class ContentType(SchemaBaseModel):
    """
    Type of coverage content
    """

    codeListValue: Optional[str] = Field(
        None,
        title=(
            "Type of coverage content, eg. 'image'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CoverageContentTypeCode) Coverage"
            " content type codelist. Suggested values: {image, thematicClassification, physicalMeasurement,"
            " auxillaryInformation, qualityInformation, referenceInformation, modelResult, coordinate, auxilliaryData}"
        ),
    )
    codeList: Optional[str] = Field(
        None,
        title=(
            "Codelist used for coverage content types. Recommended URI:"
            " http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CoverageContentTypeCode"
        ),
    )
    codeSpace: Optional[str] = Field(
        None, title="Codespace of the coverage content types codelist. Recommended value: ISOTC211/19115"
    )


class DimensionItem(SchemaBaseModel):
    name: Optional[str] = Field(None, title="Name")
    type: Optional[str] = Field(None, title="Dimension type")


class CoverageDescription(SchemaBaseModel):
    """
    description of the coverage (grid/raster), ie. the definition of the grid/raster data structure
    """

    contentType: Optional[ContentType] = Field(
        None, description="Type of coverage content", title="Coverage content type"
    )
    dimension: Optional[List[DimensionItem]] = Field(None, title="Coverage dimensions")


class Cardinality(SchemaBaseModel):
    """
    Definition of the member type cardinality
    """

    lower: Optional[int] = Field(None, description="Lower cardinality range value", title="Lower cardinality")
    upper: Optional[int] = Field(None, description="Upper cardinality range value", title="Upper cardinality")


class ListedValueItem(SchemaBaseModel):
    label: Optional[str] = Field(None, description="a label for the value", title="Value label")
    code: Optional[str] = Field(None, description="a code for the value", title="Value code")
    definition: Optional[str] = Field(None, description="a definition for the value", title="Value definition")


class CarrierOfCharacteristic(SchemaBaseModel):
    memberName: Optional[str] = Field(
        None, description="Name of the property member of the feature type", title="Member name"
    )
    definition: Optional[str] = Field(
        None, description="Definition of the property member of the feature type", title="Definition"
    )
    cardinality: Optional[Cardinality] = Field(
        None, description="Definition of the member type cardinality", title="Cardinality"
    )
    code: Optional[str] = Field(None, description="Code for the attribute member of the feature type", title="Code")
    valueMeasurementUnit: Optional[str] = Field(
        None, description="Measurement unit of the values (in case of variable)", title="Value measurement unit"
    )
    valueType: Optional[str] = Field(
        None,
        description=(
            "Type of value. A good practice is to rely on primitive data types defined in the XML Schema"
            " https://www.w3.org/2009/XMLSchema/XMLSchema.xsd"
        ),
        title="Value type",
    )
    listedValue: Optional[List[ListedValueItem]] = Field(
        None, description="List of controlled value(s) used in te attribute member", title="Listed value(s)"
    )


class FeatureTypeItem(SchemaBaseModel):
    typeName: Optional[str] = Field(
        None,
        description=(
            "text string that uniquely identifies this feature type within the feature catalogue that contains this"
            " feature type"
        ),
        title="Type name",
    )
    definition: Optional[str] = Field(
        None, description="definition of the feature type in a natural language", title="Definition"
    )
    code: Optional[str] = Field(
        None,
        description=(
            "code that uniquely identifies this feature type within the feature catalogue that contains this feature"
            " type"
        ),
        title="Code",
    )
    isAbstract: Optional[bool] = Field(
        None, description="indicates if the feature type is abstract or not", title="Is abstract"
    )
    aliases: Optional[List[str]] = Field(None, description="equivalent name(s) of this feature type", title="Alias(es)")
    carrierOfCharacteristics: Optional[List[CarrierOfCharacteristic]] = Field(
        None,
        description="links this feature type to the property types that it contains",
        title="Carrier(s) of characteristics",
    )


class Tag(SchemaBaseModel):
    tag: Optional[str] = Field(None, title="Tag")
    tag_group: Optional[str] = Field(None, title="Tag group")


class ModelInfoItem(SchemaBaseModel):
    source: Optional[str] = Field(None, title="Source")
    author: Optional[str] = Field(None, title="Author")
    version: Optional[str] = Field(None, title="Version")
    model_id: Optional[str] = Field(None, title="Model Identifier")
    nb_topics: Optional[float] = Field(None, title="Number of topics")
    description: Optional[str] = Field(None, title="Description")
    corpus: Optional[str] = Field(None, title="Corpus name")
    uri: Optional[str] = Field(None, title="URI")


class TopicWord(SchemaBaseModel):
    word: Optional[str] = Field(None, title="Word")
    word_weight: Optional[float] = Field(None, title="Word weight")


class TopicDescriptionItem(SchemaBaseModel):
    topic_id: Optional[Union[int, str]] = Field(None, title="Topic identifier")
    topic_score: Optional[Union[float, str]] = Field(None, title="Topic score")
    topic_label: Optional[str] = Field(None, title="Topic label")
    topic_words: Optional[List[TopicWord]] = Field(None, description="Words", title="Topic words")


class LdaTopic(SchemaBaseModel):
    class Config:
        extra = Extra.forbid

    model_info: Optional[List[ModelInfoItem]] = Field(None, title="Model information")
    topic_description: Optional[List[TopicDescriptionItem]] = Field(None, title="Topic information")


class Embedding(SchemaBaseModel):
    id: str = Field(..., title="Vector Model ID")
    description: Optional[str] = Field(None, title="Vector Model Description")
    date: Optional[str] = Field(None, title="Date (YYYY-MM-DD)")
    vector: Dict[str, Any] = Field(..., title="Vector")


class ResourceSchema(SchemaBaseModel):
    """
    External resource schema
    """

    dctype: Optional[str] = Field(
        "doc/oth",
        description=(
            "Document types for external resource e.g. `doc/adm` \n* `doc/adm` - Document, Administrative [doc/adm] \n*"
            " `doc/anl` - Document, Analytical [doc/anl] \n* `doc/oth` - Document, Other [doc/oth] \n* `doc/qst` -"
            " Document, Questionnaire [doc/qst] \n* `doc/ref` - Document, Reference [doc/ref] \n* `doc/rep` - Document,"
            " Report [doc/rep]  \n* `doc/tec` - Document, Technical [doc/tec] \n* `aud` - Audio [aud]\n* `dat` -"
            " Database [dat]\n* `map` - Map [map]\n* `dat/micro` - Microdata File [dat/micro]\n* `pic` - Photo [pic]\n*"
            " `prg` - Program [prg]\n* `tbl` - Table [tbl]\n* `vid` - Video [vid]  \n* `web` - Web Site [web]"
        ),
        title="Resource type",
    )
    dcformat: Optional[str] = Field(
        None,
        description=(
            "Document file format e.g. `application/zip` \n* `application/x-compressed` - Compressed, Generic \n*"
            " `application/zip` - Compressed, ZIP  \n* `application/x-cspro` - Data, CSPro  \n* `application/dbase` -"
            " Data, dBase   \n* `application/msaccess` - Data, Microsoft Access  \n* `application/x-sas` - Data, SAS "
            " \n* `application/x-spss` - Data, SPSS   \n* `application/x-stata` - Data, Stata   \n* `text` - Document,"
            " Generic  \n* `text/html` - Document, HTML  \n* `application/msexcel` - Document, Microsoft Excel  \n*"
            " `application/mspowerpoint` - Document, Microsoft PowerPoint \n* `application/msword` - Document,"
            " Microsoft Word  \n* `application/pdf` - Document, PDF  \n* `application/postscript` - Document,"
            " Postscript  \n* `text/plain` - Document, Plain \n* `text/wordperfect` - Document, WordPerfect  \n*"
            " `image/gif` - Image, GIF  \n* `image/jpeg` - Image, JPEG   \n* `image/png` - Image, PNG   \n*"
            " `image/tiff` - Image, TIFF"
        ),
        title="Resource Format",
    )
    title: str = Field(..., description="Title")
    author: Optional[str] = Field(None, description="Author")
    dcdate: Optional[str] = Field(None, description="Date")
    country: Optional[str] = Field(None, description="Country")
    language: Optional[str] = Field(None, description="Language")
    contributor: Optional[str] = Field(None, description="Contributor")
    publisher: Optional[str] = Field(None, description="Publisher")
    rights: Optional[str] = Field(None, description="Rights")
    description: Optional[str] = Field(None, description="Description")
    abstract: Optional[str] = Field(None, description="Abstract")
    toc: Optional[str] = Field(None, description="TOC")
    filename: Optional[str] = Field(
        None,
        description=(
            "Resource file name or URL. For uploading a file, use the field `file` in formData or use the `Upload file`"
            " endpoint."
        ),
    )


class OriginDescription(SchemaBaseModel):
    harvest_date: Optional[str] = Field(None, description="Harvest date using UTC date format")
    altered: Optional[bool] = Field(
        None, description="If the metadata was altered before dissemination", title="Metadata altered"
    )
    base_url: Optional[str] = Field(None, description="Base URL of the originating repository")
    identifier: Optional[str] = Field(None, description="Unique idenifiter of the item from the originating repository")
    date_stamp: Optional[str] = Field(
        None,
        description="Datestamp (UTC date format) of the metadata record disseminated by the originating repository",
    )
    metadata_namespace: Optional[str] = Field(
        None,
        description=(
            "Metadata namespace URI of the metadata format of the record harvested from the originating repository"
        ),
    )


class ProvenanceSchema(SchemaBaseModel):
    """
    Provenance of metadata based on the OAI provenance schema (http://www.openarchives.org/OAI/2.0/provenance.xsd)
    """

    origin_description: Optional[OriginDescription] = Field(None, title="Origin description")


class Language(SchemaBaseModel):
    __root__: str = Field(
        ...,
        description=(
            "Language of the resource. Preferred code following the [ISO 639-2](http://www.loc.gov/standards/iso639-2/)"
            " (alpha-3 code)"
        ),
        title="Language",
    )


class CharacterSet(SchemaBaseModel):
    """
    Character encoding used e.g. UTF-8
    """

    codeListValue: Optional[str] = Field(
        None,
        title=(
            "Character set code, e.g 'utf8'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode) CharacterSet"
            " codelist"
        ),
    )
    codeList: Optional[str] = Field(
        None,
        title=(
            "Codelist used for character sets. Recommended URI:"
            " http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode"
        ),
    )


class TopicCategory(SchemaBaseModel):
    __root__: str = Field(
        ...,
        description=(
            "Topic category of the resource. e.g. `owner`. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopicCategoryCode) TopicCategory"
            " codelist. Suggested values: {`farming`, `biota`, `boundaries`, `climatologyMeteorologyAtmosphere`,"
            " `economy`, `elevation`, `environment`, `geoscientificInformation`, `health`, `imageryBaseMapsEarthCover`,"
            " `intelligenceMilitary`, `inlandWaters`, `location`, `oceans`, `planningCadastre`, `society`, `structure`,"
            " `transportation`, `utilitiesCommunication`, `extraTerrestrial`, `disaster`}"
        ),
        title="Topic Category",
    )


class Scope(SchemaBaseModel):
    __root__: str = Field(
        ...,
        description=(
            "Scope(s), or 'hierarchy level(s)' applicable to the dataset description e.g. dataset, series. Recommended"
            " code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MX_ScopeCode) Scope codelist."
            " Suggested values: `attribute`, `attributeType`, `collectionHardware`, `collectionSession`, `dataset`,"
            " `series`, `nonGeographicDataset`, `dimensionGroup`, `feature`, `featureType`, `propertyType`,"
            " `fieldSession`, `software`, `service`, `model`, `tile`, `initiative`, `stereomate`, `sensor`,"
            " `platformSeries`, `sensorSeries`, `productionSeries`, `transferAggregate`, `otherAggregate`"
        ),
        title="Scope / Hierarchy Level",
    )


class Date(SchemaBaseModel):
    """
    Date
    """

    date: str = Field(..., description="Date in ISO 8601 format - YYYY-MM-DD", title="Date")
    type: Optional[str] = Field(
        None,
        description=(
            "Date type e.g. `publication`, `revision`, `creation`, `expiry`, `lastUpdate`, `lastRevision`,"
            " `deprecated`. See full list at"
            " [data.noaa.gov](https://data.noaa.gov/resources/iso19139/schema/resources/Codelist/gmxCodelists.xml#CI_DateTypeCode)"
        ),
        title="Date type",
    )


class OnlineResource(SchemaBaseModel):
    """
    Online Resource
    """

    linkage: Optional[str] = Field(None, title="Link to the resource")
    name: Optional[str] = Field(None, title="Resource title")
    description: Optional[str] = Field(None, title="Resource description")
    protocol: Optional[str] = Field(
        None, description="Protocol used to access the resource, eg HTTP, FTP", title="Protocol"
    )
    function: Optional[str] = Field(None, description="Function of the online resource", title="Function")


class Phone(SchemaBaseModel):
    """
    Phone contact information
    """

    voice: Optional[str] = Field(None, title="Phone number")
    facsimile: Optional[str] = Field(None, title="Facsimile")


class Address(SchemaBaseModel):
    """
    Address contact information
    """

    deliveryPoint: Optional[str] = Field(None, title="Delivery point")
    city: Optional[str] = Field(None, title="City")
    postalCode: Optional[str] = Field(None, title="Postal Code")
    country: Optional[str] = Field(None, title="Country")
    elctronicMailAddress: Optional[str] = Field(None, title="Email")


class ContactInfo(SchemaBaseModel):
    """
    Information to contact the responsible party
    """

    phone: Optional[Phone] = Field(None, description="Phone contact information", title="Phone")
    address: Optional[Address] = Field(None, description="Address contact information", title="Address")
    onlineResource: Optional[OnlineResource] = None


class ResponsibleParty(SchemaBaseModel):
    """
    Definition of a responsible party (individual or organization)
    """

    individualName: Optional[str] = Field(None, description="Name of the individual", title="Individual name")
    organisationName: Optional[str] = Field(None, description="Name of the organization", title="Organization name")
    positionName: Optional[str] = Field(None, description="Name of the individual position", title="Position name")
    contactInfo: Optional[ContactInfo] = Field(
        None, description="Information to contact the responsible party", title="Contact info"
    )
    role: Optional[str] = Field(
        None,
        description=(
            "Role of the responsible party. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode) Role codelist."
            " Suggested values: {`resourceProvider`, `custodian`, `owner`, `sponsor`, `user`, `distributor`,"
            " `originator`, `pointOfContact`, `principalInvestigator`, `processor`, `publisher`, `author`, `coAuthor`,"
            " `collaborator`, `editor`, `mediator`, `rightsHolder`, `contributor`, `funder`, `stakeholder`}"
        ),
        title="Role",
    )


class IdentifierItem(SchemaBaseModel):
    authority: Optional[str] = Field(
        None, description="The authority that identifies uniquely the resource metadata", title="Authority"
    )
    code: Optional[Any] = Field(None, description="A code uniquely identifying the resource metadata", title="Code")


class Series(SchemaBaseModel):
    """
    Series citation
    """

    name: Optional[str] = Field(None, description="Name of the series in which the resource is cited", title="Name")
    issueIdentification: Optional[str] = Field(None, description="Identification of the series issue", title="Issue")
    page: Optional[str] = Field(
        None, description="Identification of the series page in which the resource is cited", title="Page"
    )


class Citation(SchemaBaseModel):
    """
    A set of elements to describe a resource citation
    """

    title: Optional[str] = Field(None, description="Resource title", title="Title")
    alternateTitle: Optional[List[str]] = Field(None, description="Resource alternate title", title="Alternate Title")
    date: Optional[List[Date]] = Field(
        None, description="Date(s) associated to the resource citation", title="Citation date(s)"
    )
    edition: Optional[str] = Field(None, description="Edition", title="Edition")
    editionDate: Optional[str] = Field(
        None,
        description=(
            "Date and time when the metadata record was created or updated. Requires an extended ISO 8601 formatted"
            " combined UTC date and time string (2009-11-17T10:00:00)"
        ),
        title="Edition Date",
    )
    identifier: Optional[List[IdentifierItem]] = Field(
        None, description="Identifiers for the resource metadata", title="Identifier"
    )
    citedResponsibleParty: Optional[List[ResponsibleParty]] = Field(
        None, description="Responsible party(ies) to cite in the resource citation", title="Responsible party(ies)"
    )
    presentationForm: Optional[List[Any]] = Field(
        None,
        description=(
            "The resource presentation form. e.g. 'mapDigital'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_PresentationFormCode)"
            " PresentationForm codelist. Suggested values: {`documentDigital`, `imageDigital`, `documentHardcopy`,"
            " `imageHardcopy`, `mapDigital`, `mapHardcopy`, `modelDigital`, `modelHardcopy`, `profileDigital`,"
            " `profileHardcopy`, `tableDigital`, `tableHardcopy`, `videoDigital`, `videoHardcopy`, `audioDigital`,"
            " `audioHardcopy`, `multimediaDigital`, `multimediaHardcopy`, `physicalSample`, `diagramDigital`,"
            " `diagramHardcopy`}"
        ),
        title="Presentation form",
    )
    series: Optional[Series] = Field(None, description="Series citation", title="Series")
    otherCitationDetails: Optional[str] = Field(None, title="Other Citation Details")
    collectiveTitle: Optional[str] = Field(None, title="Collective Title")
    ISBN: Optional[str] = Field(None, title="ISBN")
    ISSN: Optional[str] = Field(None, title="ISSN")


class ReferenceSystem(SchemaBaseModel):
    """
    Reference System
    """

    code: Optional[str] = Field(None, description="example - 5701", title="Reference System Identifier Code")
    codeSpace: Optional[str] = Field(None, description="example - 'EPSG'", title="Code Space")


class UpdateScopeItem(SchemaBaseModel):
    scope: Optional[str] = Field(
        None, description="Scope of data to which maintenance is applied", title="Update Scope"
    )
    description: Optional[str] = Field(
        None,
        description="Additional information about the range or extent of the resource",
        title="Update Scope Description",
    )


class MaintenanceInfo(SchemaBaseModel):
    """
    Information about a resource maintenance
    """

    maintenanceAndUpdateFrequency: Optional[str] = Field(
        None,
        description=(
            "Frequency of maintenance/update of a resource. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_MaintenanceFrequencyCode)"
            " MaintenanceFrequency codelist. Suggested values: {`continual`, `daily`, `weekly`, `fortnightly`,"
            " `monthly`, `quarterly`, `biannually`, `annually`, `asNeeded`, `irregular`, `notPlanned`, `unknown`}"
        ),
        title="Maintenance and Update Frequency",
    )
    dateOfNextUpdate: Optional[str] = Field(
        None,
        description=(
            "Date of the next update of the resource. Requires an extended ISO 8601 formatted combined UTC date and"
            " time string (2009-11-17T10:00:00)"
        ),
        title="Date of Next Update",
    )
    userDefinedMaintenanceFrequency: Optional[str] = Field(
        None, description="User defined maintenance frequency", title="User Defined Maintenance Frequency"
    )
    updateScope: Optional[List[UpdateScopeItem]] = Field(
        None, description="Scope of data to which maintenance is applied", title="Update Scope"
    )
    maintenanceNote: Optional[List[str]] = Field(
        None, description="Note about the maintenance", title="Maintenance Note"
    )
    contact: Optional[ResponsibleParty] = Field(
        None, description="Contact information for the maintenance", title="Contact"
    )


class GraphicOverview(SchemaBaseModel):
    """
    Graphic overview of resource
    """

    fileName: Optional[str] = Field(None, title="File name / URL")
    fileDescription: Optional[str] = Field(None, title="File Description")
    fileType: Optional[str] = Field(None, title="File Type")


class Format(SchemaBaseModel):
    """
    Description of a digital format
    """

    name: Optional[str] = Field(None, title="Format name")
    version: Optional[str] = Field(None, title="Format version")
    amendmentNumber: Optional[str] = Field(None, title="Format version amendment number")
    specification: Optional[str] = Field(None, title="Format specification")
    fileDecompressionTechnique: Optional[str] = Field(None, title="File decompression technique")
    FormatDistributor: Optional[ResponsibleParty] = Field(
        None, description="Responsible party in charge of the format distribution", title="Distributor"
    )


class Keywords(SchemaBaseModel):
    """
    Set of keywords for a given type of keywords, eg. theme, project, instrument
    """

    type: Optional[str] = Field(
        None,
        description=(
            "Type of keyword based on pre-defined code values. based on (but not limited to) code values listed in the"
            " ISO 19115 \n {`dataCenter`, `discipline`, `place`, `dataResolution`,"
            " \n`stratum`,`temporal`,`theme`,`dataCentre`,`featureType`,`instrument`,`platform`,`process`,`project`,`service`,`product`,`subTopicCategory`}"
        ),
        title="Keyword type",
    )
    keyword: str = Field(..., description="Keywords")
    thesaurusName: Optional[str] = Field(
        None, description="Thesaurus to which keywords are associated", title="Thesaurus"
    )


class Restriction(SchemaBaseModel):
    __root__: str = Field(
        ...,
        description=(
            "A restriction to access/use a resource. e.g. 'dataset'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode) Restriction"
            " codelist. Suggested values: {`copyright`, `patent`, `patentPending`, `trademark`, `license`,"
            " `intellectualPropertyRights`, `restricted`, `otherRestrictions`, `unrestricted`, `licenceUnrestricted`,"
            " `licenceEndUser`, `licenceDistributor`, `private`, `statutory`, `confidential`, `SBU`, `in-confidence`}"
        ),
        title="Restriction",
    )


class LegalConstraints(SchemaBaseModel):
    """
    Legal constraints associated to the resource
    """

    useLimitation: Optional[List[str]] = None
    accessConstraints: Optional[List[Restriction]] = Field(
        None,
        description=(
            "A restriction to access/use a resource. e.g. 'dataset'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode) Restriction"
            " codelist. Suggested values: {`copyright`, `patent`, `patentPending`, `trademark`, `license`,"
            " `intellectualPropertyRights`, `restricted`, `otherRestrictions`, `unrestricted`, `licenceUnrestricted`,"
            " `licenceEndUser`, `licenceDistributor`, `private`, `statutory`, `confidential`, `SBU`, `in-confidence`}"
        ),
        title="Access constraints",
    )
    useConstraints: Optional[List[Restriction]] = Field(
        None,
        description=(
            "Legal constraints concerning the use of the resource, e.g. Terms of use statement, License. Recommended"
            " code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode) Restriction"
            " codelist. Suggested values: {`copyright`, `patent`, `patentPending`, `trademark`, `license`,"
            " `intellectualPropertyRights`, `restricted`, `otherRestrictions`, `unrestricted`, `licenceUnrestricted`,"
            " `licenceEndUser`, `licenceDistributor`, `private`, `statutory`, `confidential`, `SBU`, `in-confidence`}"
        ),
        title="Use constraints",
    )
    otherConstraints: Optional[List[str]] = Field(
        None,
        description=(
            "Other legal constraints concerning the resource, e.g. additional information to complement the access/use"
            " constraints, Disclaimer"
        ),
        title="Other constraints",
    )


class SecurityConstraints(SchemaBaseModel):
    """
    Security constraints associated to the resource
    """

    useLimitation: Optional[List[str]] = None
    classification: Optional[str] = Field(
        None,
        description=(
            "Security constraint classification , e.g. 'secret'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ClassificationCode)"
            " Classification codelist. Suggested values: {`unclassified`, `restricted`, `confidential`, `secret`,"
            " `topSecret`, `SBU`, `forOfficialUseOnly`, `protected`, `limitedDistribution`}"
        ),
        title="Classification",
    )
    userNote: Optional[str] = Field(None, title="User note")
    classificationSystem: Optional[str] = Field(
        None,
        description=(
            "A specific classification system, eg. Organization-specific system to classify resource confidentiality"
        ),
        title="Classification system",
    )
    handlingDescription: Optional[str] = Field(
        None,
        description="A description for the security constraint associated to the resource",
        title="Handling description",
    )


class Constraints(SchemaBaseModel):
    """
    Constraints associated to the resource
    """

    legalConstraints: Optional[LegalConstraints] = Field(
        None, description="Legal constraints associated to the resource", title="Legal constraints"
    )
    securityConstraints: Optional[SecurityConstraints] = Field(
        None, description="Security constraints associated to the resource", title="Security constraints"
    )


class Parameter(SchemaBaseModel):
    """
    Service parameter
    """

    name: Optional[str] = Field(None, description="Service parameter name", title="Name")
    direction: Optional[str] = Field(
        None, description="Direction of the parameter. Suggested values: {in, out, inout}", title="Direction"
    )
    description: Optional[str] = Field(None, description="Service parameter description", title="Description")
    optionality: Optional[str] = Field(
        None, description="Optionality, either 'Optional' or 'Mandatory' value", title="Optionality"
    )
    repeatability: Optional[bool] = Field(None, description="Service parameter repeatability", title="Repeatability")
    valueType: Optional[str] = Field(None, description="Value type", title="Value type")


class DCPItem(SchemaBaseModel):
    """
    Distributed Computing Plateform
    """

    codeListValue: Optional[str] = Field(
        None,
        title=(
            "DCP, eg. 'WebServices'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DCPList) DCP codelist. Suggested"
            " values: {COM, CORBA, JAVA, SQL, WebServices, XML}"
        ),
    )
    codeList: Optional[str] = Field(
        None,
        title=(
            "Codelist used for DCPs. Recommended URI:"
            " http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DCPList"
        ),
    )
    codeSpace: Optional[str] = Field(None, title="Codespace of the DCPs. Recommended value: ISOTC211/19119")


class OperationMetadata(SchemaBaseModel):
    """
    Service operation metadata descriptions
    """

    operationName: Optional[str] = Field(None, title="Operation name")
    DCP: Optional[List[DCPItem]] = Field(
        None, description="Distributed Computing Plateform(s). Recommended value: 'WebServices'", title="DCP(s)"
    )
    operationDescription: Optional[str] = Field(None, title="Operation description")
    invocationName: Optional[str] = Field(None, title="Invocation name")
    parameters: Optional[List[Parameter]] = Field(None, description="Operation parameters", title="Parameters")
    connectPoint: Optional[OnlineResource] = Field(None, title="Connect Point(s)")
    dependsOn: Optional[List[OperationMetadata]] = Field(
        None, description="Depends on (other operation metadata)", title="Depends on"
    )


class ResourceSpecificUsageItem(SchemaBaseModel):
    specificUsage: Optional[str] = Field(
        None,
        description=(
            "A description of a specific usage of this resource relevant to highlight, eg. use case of interest,"
            " success story, data paper"
        ),
        title="Specific usage description",
    )
    usageDateTime: Optional[str] = Field(
        None,
        description=(
            "Date and time of the usage. Requires an extended ISO 8601 formatted combined UTC date and time string"
            " (2009-11-17T10:00:00)"
        ),
        title="Metadata Date Stamp",
    )
    userDeterminedLimitations: Optional[str] = Field(None, title="User determined limitations")
    userContactInfo: Optional[List[ResponsibleParty]] = Field(None, title="User contact(s)")


class ServiceIdentification(SchemaBaseModel):
    """
    Service identification
    """

    serviceType: Optional[str] = Field(None, description="Service type name", title="Service type")
    serviceTypeVersion: Optional[str] = Field(None, description="Service type version", title="Service type version")
    accessProperties: Optional[AccessProperties] = Field(None, title="Access properties")
    restrictions: Optional[List[Constraints]] = Field(
        None, description="Constraints associated to the service", title="Service constraints"
    )
    keywords: Optional[List[Keywords]] = Field(
        None, description="Service keywords, organized by keyword type", title="Service keywords"
    )
    coupledResource: Optional[List[CoupledResourceItem]] = Field(
        None, description="Coupled resource(s)", title="Coupled resource(s)"
    )
    couplingType: Optional[CouplingType] = Field(None, description="Coupling type", title="Coupling type")
    containsOperations: Optional[List[OperationMetadata]] = Field(
        None, description="Operation(s) contained in the service", title="Contained operation(s)"
    )
    operatesOn: Optional[List[OperatesOnItem]] = Field(
        None,
        description="List identifiers of datasets on which service operates on",
        title="Operates on relationship(s)",
    )


class IdentificationInfo(SchemaBaseModel):
    """
    Identification(s) of the resource
    """

    citation: Optional[Citation] = Field(None, description="Dataset citation", title="Citation")
    abstract: Optional[str] = Field(None, description="Abstract describing the dataset resource", title="Abstract")
    purpose: Optional[str] = Field(None, description="Purpose of the dataset resource", title="Purpose")
    credit: Optional[str] = Field(None, description="Credit associated to the dataset resource", title="Credit")
    status: Optional[List] = Field(
        None,
        description=(
            "Status of the dataset resource. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ProgressCode) Progress codelist."
            " Suggested values: {`completed`, `historicalArchive`, `obsolete`, `onGoing`, `planned`, `required`,"
            " `underDevelopment`, `final`, `pending`, `retired`, `superseded`, `tentative`, `valid`, `accepted`,"
            " `notAccepted`, `withdrawn`, `proposed`, `deprecated`}"
        ),
        title="Status",
    )
    pointOfContact: Optional[List[ResponsibleParty]] = Field(
        None, description="One or more points of contacts for the resource", title="Points of contact"
    )
    resourceMaintenance: Optional[List[MaintenanceInfo]] = Field(
        None, description="Information about the dataset resource maintenance", title="Resource maintenance"
    )
    graphicOverview: Optional[List[GraphicOverview]] = Field(
        None, description="Graphic Overview(s) for the dataset resource", title="Graphic Overview(s)"
    )
    resourceFormat: Optional[List[Format]] = Field(None, description="Resource format(s)", title="Resource format(s)")
    descriptiveKeywords: Optional[List[Keywords]] = Field(
        None, description="Descriptive keywords, organized by keyword type", title="Descriptive keywords"
    )
    resourceConstraints: Optional[List[Constraints]] = Field(
        None, description="Constraints associated to the resource", title="Resource constraints"
    )
    resourceSpecificUsage: Optional[List[ResourceSpecificUsageItem]] = Field(
        None, description="Resource specific usage(s) - if applicable", title="Resource specific usage(s)"
    )
    aggregationInfo: Optional[AggregationInfo] = Field(
        None,
        description="Identification of aggregate that encompasses the described resource, eg. data collection",
        title="Aggregate information",
    )
    extent: Optional[Extent] = Field(
        None,
        description=(
            "Defines the spatial (horizontal and vertical) and temporal region to which the content of the resource"
            " applies."
        ),
        title="Extent of the resource",
    )
    spatialRepresentationType: Optional[List[str]] = Field(
        None,
        description=(
            "Spatial representation type of the resource. e.g. 'vector'. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_SpatialRepresentationTypeCode)"
            " SpatialRepresentationType codelist. Suggested values: {`vector`, `grid`, `textTable`, `tin`,"
            " `stereoModel`, `video`}"
        ),
        title="Spatial Representation type",
    )
    spatialResolution: Optional[List[SpatialResolutionItem]] = Field(
        None, description="Spatial resolution of the resource", title="Spatial Resolution"
    )
    language: Optional[List[Language]] = Field(
        None,
        description=(
            "Resource language(s). Preferred code following the [ISO 639-2](http://www.loc.gov/standards/iso639-2/)"
            " (alpha-3 code)"
        ),
        title="Resource language(s)",
    )
    characterSet: Optional[List[CharacterSet]] = Field(
        None, description="Resource character set(s)", title="Resource character set(s)"
    )
    topicCategory: Optional[List[TopicCategory]] = Field(
        None,
        description=(
            "Topic category of the resource. e.g. `owner`. Recommended code following the [ISO/TS"
            " 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopicCategoryCode) TopicCategory"
            " codelist. Suggested values: {`farming`, `biota`, `boundaries`, `climatologyMeteorologyAtmosphere`,"
            " `economy`, `elevation`, `environment`, `geoscientificInformation`, `health`, `imageryBaseMapsEarthCover`,"
            " `intelligenceMilitary`, `inlandWaters`, `location`, `oceans`, `planningCadastre`, `society`, `structure`,"
            " `transportation`, `utilitiesCommunication`, `extraTerrestrial`, `disaster`}"
        ),
        title="Topic categories",
    )
    supplementalInformation: Optional[str] = Field(
        None, description="Additional information about the resource", title="Supplemental Information"
    )
    serviceIdentification: Optional[ServiceIdentification] = Field(
        None, description="Service identification", title="Service identification"
    )


class FeatureCatalogueDescription(SchemaBaseModel):
    """
    description of the feature catalogue (ISO 19110) associated to a vector resource, ie. the definition of the vector data structure
    """

    complianceCode: Optional[bool] = Field(
        None,
        description="Indicates whether the dataset complies with the feature catalogue description",
        title="Compliance code",
    )
    language: Optional[str] = Field(None, title="Feature catalogue language")
    includedWithDataset: Optional[bool] = Field(
        None,
        description="Indicates if the feature catalogue (ISO 19110) is included with the dataset?",
        title="Included with dataset",
    )
    featureCatalogueCitation: Optional[Citation] = Field(None, title="Feature Catalogue citation")


class ContentInfoItem(SchemaBaseModel):
    featureCatalogueDescription: Optional[FeatureCatalogueDescription] = Field(
        None,
        description=(
            "description of the feature catalogue (ISO 19110) associated to a vector resource, ie. the definition of"
            " the vector data structure"
        ),
        title="Feature Catalogue Description",
    )
    coverageDescription: Optional[CoverageDescription] = Field(
        None,
        description="description of the coverage (grid/raster), ie. the definition of the grid/raster data structure",
        title="Coverage Description",
    )


class TransferOptions(SchemaBaseModel):
    """
    Options of digital transfer available for the resource
    """

    onLine: Optional[List[ResourceSchema]] = Field(None, title="Online Resources")


class DistributionInfo(SchemaBaseModel):
    """
    Distribution information
    """

    distributionFormat: Optional[List[Format]] = Field(None, title="Distribution format(s)")
    distributor: Optional[List[ResponsibleParty]] = Field(
        None, description="Responsible party(ies) in charge of the resource distribution", title="Distributor(s)"
    )
    transferOptions: Optional[TransferOptions] = Field(
        None, description="Options of digital transfer available for the resource", title="Digital transfer options"
    )


class ResultItem(SchemaBaseModel):
    specification: Optional[Citation] = Field(
        None, description="The specification(s) of the data quality conformance result", title="Result specification"
    )
    explanation: Optional[str] = Field(
        None,
        description="The explanation(s) of the data quality conformance (or non-conformance) result",
        title="Result explanation",
    )
    pass_: Optional[bool] = Field(
        None,
        alias="pass",
        description="Indicates whether or not the conformance result is a success",
        title="Result pass",
    )


class Result(SchemaBaseModel):
    """
    Result of conformance of the resource
    """

    nameOfMeasure: Optional[List[str]] = Field(None, description="Data quality measure names", title="Measures")
    measureIdentification: Optional[str] = Field(
        None, description="Unique identifier for the data quality measure", title="Measure identification"
    )
    measureDescription: Optional[str] = Field(
        None, description="Description for the data quality measure", title="Measure description"
    )
    evaluationMethodType: Optional[List[str]] = Field(
        None,
        description=(
            "The type of method to evaluate the data quality measure. e.g. 'indirect'. Recommended code following the"
            " [ISO/TS 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#DQ_EvaluationMethodTypeCode)"
            " TopicCategory codelist. Suggested values: {`directInternal`, `directExternal`, `indirect`}"
        ),
        title="Evaluation method type",
    )
    evaluationMethodDescription: Optional[str] = Field(
        None, description="a description of the data quality evaluation method", title="Evaluation method description"
    )
    evaluationProcedure: Optional[Citation] = Field(
        None, description="Evaluation procedure description (as 'citation')", title="Evaluation procedure"
    )
    dateTime: Optional[str] = Field(
        None,
        description=(
            "Date and time when the data quality report has been established. Requires an extended ISO 8601 formatted"
            " combined UTC date and time string (2009-11-17T10:00:00)"
        ),
        title="Report Date Stamp",
    )
    result: Optional[List[ResultItem]] = Field(
        None, description="Result(s) of consistency associated to the data quality report", title="Result(s)"
    )


class DQDomainConsistency(SchemaBaseModel):
    """
    Domain consistency report information
    """

    result: Optional[Result] = Field(
        None, description="Result of conformance of the resource", title="Conformance Result"
    )


class ReportItem(SchemaBaseModel):
    DQ_DomainConsistency: Optional[DQDomainConsistency] = Field(
        None, description="Domain consistency report information", title="Data quality domain consistency"
    )


class SourceItem(SchemaBaseModel):
    description: Optional[str] = Field(None, title="Source description")
    sourceCitation: Optional[Citation] = Field(None, title="Source citation")


class ProcessStepItem(SchemaBaseModel):
    description: Optional[str] = Field(
        None, description="description of the process step", title="process step description"
    )
    rationale: Optional[str] = Field(None, description="rationale of the process step", title="process step rationale")
    dateTime: Optional[str] = Field(
        None,
        description=(
            "Date and time when the data quality report has been established. Requires an extended ISO 8601 formatted"
            " combined UTC date and time string (2009-11-17T10:00:00)"
        ),
        title="Date stamp",
    )
    processor: Optional[List[ResponsibleParty]] = Field(
        None, description="Responsible party(ies) in charge of the processing for the step", title="Processor(s)"
    )
    source: Optional[List[SourceItem]] = Field(
        None, description="Source(s) processed during the process step", title="Source(s)"
    )


class Lineage(SchemaBaseModel):
    """
    Description of the resource lineage, ie process steps performed to lead to the resource
    """

    statement: Optional[str] = Field(
        None,
        description="A description of the overall lineage information. eg. 'Data management workflow'",
        title="Lineage statement",
    )
    processStep: Optional[List[ProcessStepItem]] = Field(
        None, description="Description of the process steps required to obtain the resource", title="Process step(s)"
    )


class DataQualityInfoItem(SchemaBaseModel):
    scope: Optional[Scope] = Field(None, title="Scope of the data quality information")
    report: Optional[List[ReportItem]] = Field(
        None, description="Data quality report(s) associated to the resource", title="Data quality report(s)"
    )
    lineage: Optional[Lineage] = Field(
        None,
        description="Description of the resource lineage, ie process steps performed to lead to the resource",
        title="Lineage",
    )


class PortrayalCatalogueInfo(SchemaBaseModel):
    """
    Information identifying the portrayal catalogue used by the resource
    """

    portrayalCatalogueCitation: Optional[List[Citation]] = Field(None, title="Citation for the portrayal catalogue")


class FeatureCatalogue(SchemaBaseModel):
    name: Optional[str] = Field(None, description="Name of the feature catalogue", title="Name")
    scope: Optional[List[str]] = Field(
        None, description="Subject domain(s) of feature types defined in this feature catalogue", title="Scope(s)"
    )
    fieldOfApplication: Optional[List[str]] = Field(
        None,
        description="Description of kind(s) of use to which this feature catalogue may be put",
        title="Field(s) of application",
    )
    versionNumber: Optional[str] = Field(
        None,
        description=(
            "version number of this feature catalogue, which may include both a major version number or letter and a"
            " sequence of minor release numbers or letters, such as '3.2.4a.' The format of this attribute may differ"
            " between cataloguing authorities."
        ),
        title="Version number",
    )
    versionDate: Optional[Date] = None
    producer: Optional[ResponsibleParty] = Field(
        None,
        description=(
            "Name, address, country, and telecommunications address of person or organization having primary"
            " responsibility for the intellectual content of this feature catalogue"
        ),
        title="Producer",
    )
    functionalLanguage: Optional[str] = Field(
        None,
        description=(
            "Formal functional language in which the feature operation formal definition occurs in this feature"
            " catalogue"
        ),
        title="Functional language",
    )
    featureType: Optional[List[FeatureTypeItem]] = Field(
        None, description="Feature type(s) contained in the catalogue", title="Feature type(s)"
    )


class Description(SchemaBaseModel):
    idno: str = Field(..., description="Global unique persistent identifier", title="Unique Identifier")
    language: Optional[str] = Field(None, description="Main metadata language", title="Language")
    characterSet: Optional[CharacterSet] = Field(
        None, description="Metadata Character encoding used e.g. UTF-8", title="Character set"
    )
    parentIdentifier: Optional[str] = Field(
        None,
        description=(
            "Global unique persistent identifier of the parent record, eg. a data collection that includes several"
            " datasets"
        ),
        title="Unique parent identifier",
    )
    hierarchyLevel: Optional[str] = Field(
        None,
        description=(
            "List of Scope(s), or 'hierarchy level(s)'. e.g. `dataset`, `service`. Recommended code following the"
            " [ISO/TS 19139](http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MX_ScopeCode) Scope"
            " codelist.  (string)"
        ),
        title="Scope(s) / Hierarchy Level(s)",
    )
    hierarchyLevelName: Optional[str] = Field(
        None,
        description="List of scope / hierarchy level names. Alternative to the use of 'hierarchyLevel' code items.",
        title="Scope / hierarchy level names.",
    )
    contact: Optional[List[ResponsibleParty]] = Field(
        None, description="Contact(s) associated to the metadata", title="Contacts"
    )
    dateStamp: Optional[str] = Field(
        None,
        description=(
            "Date and time when the metadata record was created or updated. Requires an extended ISO 8601 formatted"
            " combined UTC date and time string (2009-11-17T10:00:00)"
        ),
        title="Metadata Date Stamp",
    )
    metadataStandardName: Optional[str] = Field(
        None,
        description="Standard name of the metadata standard used. Recommended value: ISO 19115:2003/19139",
        title="Metadata standard name",
    )
    metadataStandardVersion: Optional[str] = Field(
        None,
        description=(
            "Version of the metadata standard used. Optional for ISO/TC211 standard if the metadata standard name"
            " includes the inception year"
        ),
        title="Metadata standard version",
    )
    dataSetURI: Optional[str] = Field(
        None, description="A URI that uniquely identifies the dataset", title="Dataset URI"
    )
    spatialRepresentationInfo: Optional[List[SpatialRepresentationInfoItem]] = Field(
        None, title="Resource Spatial Representation(s)"
    )
    referenceSystemInfo: Optional[List[ReferenceSystem]] = Field(
        None,
        description=(
            "Resource's spatial reference systems - Description of the spatial and/or temporal reference systems used"
            " in the dataset."
        ),
        title="Resource Reference Systems",
    )
    identificationInfo: Optional[IdentificationInfo] = Field(
        None, description="Identification(s) of the resource", title="Identification Info(s)"
    )
    contentInfo: Optional[List[ContentInfoItem]] = Field(
        None,
        description="Information on the resource content, ie data structure definition",
        title="Content information",
    )
    distributionInfo: Optional[DistributionInfo] = Field(
        None, description="Distribution information", title="Distribution information"
    )
    dataQualityInfo: Optional[List[DataQualityInfoItem]] = Field(
        None, description="Data quality information", title="Data quality information"
    )
    metadataMaintenance: Optional[MaintenanceInfo] = Field(
        None, description="Metadata maintenance information", title="Metadata Maintenance information"
    )
    portrayalCatalogueInfo: Optional[PortrayalCatalogueInfo] = Field(
        None,
        description="Information identifying the portrayal catalogue used by the resource",
        title="Portrayal catalogue information",
    )
    metadataExtensionInfo: Optional[Any] = None
    applicationSchemaInformation: Optional[Any] = None
    thesaurusInfo: Optional[List[Citation]] = Field(
        None, description="Thesaurus referenced by keywords", title="Thesaurus"
    )
    feature_catalogue: Optional[FeatureCatalogue] = Field(None, title="Feature catalogue")


class GeospatialSchema(SchemaBaseModel):
    """
    Geospatial draft schema
    """

    idno: Optional[str] = Field(None, description="Project unique identifier", title="Project unique identifier")
    metadata_information: Optional[MetadataInformation] = Field(
        None, description="Document description", title="Document metadata information"
    )
    description: Description = Field(..., title="Geospatial schema")
    provenance: Optional[List[ProvenanceSchema]] = Field(None, description="Provenance")
    tags: Optional[List[Tag]] = Field(None, description="Tags", title="Tags")
    lda_topics: Optional[List[LdaTopic]] = Field(None, description="LDA topics", title="LDA topics")
    embeddings: Optional[List[Embedding]] = Field(None, description="Word embeddings", title="Word embeddings")
    additional: Optional[Dict[str, Any]] = Field(
        None, description="Any additional metadata", title="Additional metadata"
    )


class CharacterEncoding(SchemaBaseModel):
    """
    Character encoding used e.g. UTF-8
    """

    characterSet: Optional[CharacterSet] = Field(
        None, description="Character encoding used e.g. UTF-8", title="Character set"
    )


class Locale(SchemaBaseModel):
    """
    Locale definition for multi-lingual description
    """

    id: Optional[str] = Field(None, description="Locale code, eg. FR, EN", title="Locale code")
    languageCode: Optional[Language] = Field(None, description="Language", title="Language")
    characterEncoding: Optional[CharacterEncoding] = Field(
        None, description="Character encoding used e.g. UTF-8", title="Character set"
    )


OperationMetadata.update_forward_refs()
